[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/HW0/index.html",
    "href": "posts/HW0/index.html",
    "title": "HW0",
    "section": "",
    "text": "In this blog, I will be explaining how to construct interesting data visualizations of the Palmer Penguins data set using Python.\nThe dataset can be plugged into Python as shown below.\n\nimport pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\nurl = \"https://raw.githubusercontent.com/pic16b-ucla/24W/main/datasets/palmer_penguins.csv\"\npenguins = pd.read_csv(url)\npenguins.head()\n\n\n\n\n\n\n\n\nstudyName\nSample Number\nSpecies\nRegion\nIsland\nStage\nIndividual ID\nClutch Completion\nDate Egg\nCulmen Length (mm)\nCulmen Depth (mm)\nFlipper Length (mm)\nBody Mass (g)\nSex\nDelta 15 N (o/oo)\nDelta 13 C (o/oo)\nComments\n\n\n\n\n0\nPAL0708\n1\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN1A1\nYes\n11/11/07\n39.1\n18.7\n181.0\n3750.0\nMALE\nNaN\nNaN\nNot enough blood for isotopes.\n\n\n1\nPAL0708\n2\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN1A2\nYes\n11/11/07\n39.5\n17.4\n186.0\n3800.0\nFEMALE\n8.94956\n-24.69454\nNaN\n\n\n2\nPAL0708\n3\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN2A1\nYes\n11/16/07\n40.3\n18.0\n195.0\n3250.0\nFEMALE\n8.36821\n-25.33302\nNaN\n\n\n3\nPAL0708\n4\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN2A2\nYes\n11/16/07\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nAdult not sampled.\n\n\n4\nPAL0708\n5\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN3A1\nYes\n11/16/07\n36.7\n19.3\n193.0\n3450.0\nFEMALE\n8.76651\n-25.32426\nNaN"
  },
  {
    "objectID": "posts/HW0/index.html#introduction",
    "href": "posts/HW0/index.html#introduction",
    "title": "HW0",
    "section": "",
    "text": "In this blog, I will be explaining how to construct interesting data visualizations of the Palmer Penguins data set using Python.\nThe dataset can be plugged into Python as shown below.\n\nimport pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\nurl = \"https://raw.githubusercontent.com/pic16b-ucla/24W/main/datasets/palmer_penguins.csv\"\npenguins = pd.read_csv(url)\npenguins.head()\n\n\n\n\n\n\n\n\nstudyName\nSample Number\nSpecies\nRegion\nIsland\nStage\nIndividual ID\nClutch Completion\nDate Egg\nCulmen Length (mm)\nCulmen Depth (mm)\nFlipper Length (mm)\nBody Mass (g)\nSex\nDelta 15 N (o/oo)\nDelta 13 C (o/oo)\nComments\n\n\n\n\n0\nPAL0708\n1\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN1A1\nYes\n11/11/07\n39.1\n18.7\n181.0\n3750.0\nMALE\nNaN\nNaN\nNot enough blood for isotopes.\n\n\n1\nPAL0708\n2\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN1A2\nYes\n11/11/07\n39.5\n17.4\n186.0\n3800.0\nFEMALE\n8.94956\n-24.69454\nNaN\n\n\n2\nPAL0708\n3\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN2A1\nYes\n11/16/07\n40.3\n18.0\n195.0\n3250.0\nFEMALE\n8.36821\n-25.33302\nNaN\n\n\n3\nPAL0708\n4\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN2A2\nYes\n11/16/07\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nAdult not sampled.\n\n\n4\nPAL0708\n5\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN3A1\nYes\n11/16/07\n36.7\n19.3\n193.0\n3450.0\nFEMALE\n8.76651\n-25.32426\nNaN"
  },
  {
    "objectID": "posts/HW0/index.html#scatter-plot",
    "href": "posts/HW0/index.html#scatter-plot",
    "title": "HW0",
    "section": "Scatter Plot",
    "text": "Scatter Plot\nFor the next step, we will explore the numerical data in the table further in the following figures. Here, we create figures to model the relationship between different variables and columns in the dataset.\n\nsns.scatterplot(x='Flipper Length (mm)', y='Body Mass (g)', hue='Species', data=penguins)\nplt.title('Flipper Length vs Body Mass by Species')\nplt.show()\n\n\n\n\n\n\n\n\nThis plot reveals that in all three species, there are positive correlations between the relationships, indicating that a greater body mass is associated with both a longer culmen length and a greater culmen depth."
  },
  {
    "objectID": "posts/HW0/index.html#histogram",
    "href": "posts/HW0/index.html#histogram",
    "title": "HW0",
    "section": "Histogram",
    "text": "Histogram\nHistogram helps in understanding the underlying shape of the data distribution and allow for the comparison of distributions between different datasets, which can be useful for understanding differences or similarities between them. Let’s see how to create it.\n\nfig,ax = plt.subplots(1)\n# Define data and add it to subplot as histogram\nfor i in set(penguins['Species']):\n    s = penguins[penguins['Species'] == i]\n    ax.hist(s['Flipper Length (mm)'],\n        label = i.split(' ')[0],\n        alpha = 0.5)\n    # Add labels and legend to plots\nax.set(title = \"Frequency of Penguins by Flipper Length\",\n    xlabel = \"Flipper Length (mm)\",\n    ylabel = \"Frequency\")\nax.legend()\nplt.tight_layout()\n\n\n\n\n\n\n\n\nFrom the histogram we can see all distributions are generally normal, and Gentoo have larger flipper length compared to Chinstrap and Adelie."
  },
  {
    "objectID": "posts/HW0/index.html#boxplot",
    "href": "posts/HW0/index.html#boxplot",
    "title": "HW0",
    "section": "Boxplot",
    "text": "Boxplot\nBoxplot is useful for comparing the distributions of multiple datasets side-by-side. Let’s see how to create it.\n\nfig,(ax1,ax2) = plt.subplots(1,2, figsize=(20,6))\n# Add data to plots as boxplots\nfgrid = sns.boxplot(data = penguins,\nx = \"Delta 15 N (o/oo)\",\ny = \"Island\",\nhue = \"Species\", ax = ax1)\n\nfgrid = sns.boxplot(data = penguins,\nx = \"Delta 13 C (o/oo)\",\ny = \"Island\",\nhue = \"Species\", ax = ax2)\n\nplt.show()\nplt.tight_layout()\n\n\n\n\n\n\n\n\n&lt;Figure size 432x288 with 0 Axes&gt;\n\n\nThe box plot indicates that the penguins generally exhibit greater Delta 15 N values compared to Delta 13 N. Among them, Chinstrap penguins typically show higher levels of both Delta 15 N and Delta 13 N relative to other penguin species, while Gentoo penguins usually have lower Delta 15 and 13 N values in comparison to their counterparts."
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome! Have a great day!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "posts/HW1/hw1.html",
    "href": "posts/HW1/hw1.html",
    "title": "HW1",
    "section": "",
    "text": "In this post, I will show how to do data wrangling and visualization using the NOAA climate data. First, let’s create a database.\n\nimport sqlite3\nimport pandas as pd\nconn = sqlite3.connect(\"weather.db\")\n\ndf = pd.read_csv(\"temps.csv\")\ndef prepare_df(df):\n    df = df.set_index(keys=[\"ID\", \"Year\"])\n    df = df.stack()\n    df = df.reset_index()\n    df = df.rename(columns = {\"level_2\"  : \"Month\" , 0 : \"Temp\"})\n    df[\"Month\"] = df[\"Month\"].str[5:].astype(int)\n    df[\"Temp\"]  = df[\"Temp\"] / 100\n    return(df)\ndf = prepare_df(df)\ndf.to_sql(\"temperatures\", conn, if_exists='replace', index=False)\n\ndf = pd.read_csv(\"countries.csv\")\ndf.to_sql(\"countries\", conn, if_exists='replace', index=False)\n\ndf = pd.read_csv(\"station-metadata.csv\")\ndf.to_sql(\"stations\", conn, if_exists='replace', index=False)\n\nconn.close()\n\n\nconn = sqlite3.connect('weather.db')\ncursor = conn.cursor()\n\n# Query to list all tables\ncursor.execute(\"PRAGMA table_info('temperatures');\")\ncolumns = cursor.fetchall()\n\n# Print the column names\nprint(\"Column names in 'temperatures' table:\")\nfor col in columns:\n    print(col[1])  # Column name is in the second position\n\nconn.close()\n\nColumn names in 'temperatures' table:\nID\nYear\nMonth\nTemp"
  },
  {
    "objectID": "posts/HW1/hw1.html#preperation",
    "href": "posts/HW1/hw1.html#preperation",
    "title": "HW1",
    "section": "",
    "text": "In this post, I will show how to do data wrangling and visualization using the NOAA climate data. First, let’s create a database.\n\nimport sqlite3\nimport pandas as pd\nconn = sqlite3.connect(\"weather.db\")\n\ndf = pd.read_csv(\"temps.csv\")\ndef prepare_df(df):\n    df = df.set_index(keys=[\"ID\", \"Year\"])\n    df = df.stack()\n    df = df.reset_index()\n    df = df.rename(columns = {\"level_2\"  : \"Month\" , 0 : \"Temp\"})\n    df[\"Month\"] = df[\"Month\"].str[5:].astype(int)\n    df[\"Temp\"]  = df[\"Temp\"] / 100\n    return(df)\ndf = prepare_df(df)\ndf.to_sql(\"temperatures\", conn, if_exists='replace', index=False)\n\ndf = pd.read_csv(\"countries.csv\")\ndf.to_sql(\"countries\", conn, if_exists='replace', index=False)\n\ndf = pd.read_csv(\"station-metadata.csv\")\ndf.to_sql(\"stations\", conn, if_exists='replace', index=False)\n\nconn.close()\n\n\nconn = sqlite3.connect('weather.db')\ncursor = conn.cursor()\n\n# Query to list all tables\ncursor.execute(\"PRAGMA table_info('temperatures');\")\ncolumns = cursor.fetchall()\n\n# Print the column names\nprint(\"Column names in 'temperatures' table:\")\nfor col in columns:\n    print(col[1])  # Column name is in the second position\n\nconn.close()\n\nColumn names in 'temperatures' table:\nID\nYear\nMonth\nTemp"
  },
  {
    "objectID": "posts/HW1/hw1.html#extract-dataframe",
    "href": "posts/HW1/hw1.html#extract-dataframe",
    "title": "HW1",
    "section": "Extract Dataframe",
    "text": "Extract Dataframe\n\nfrom climate_database import query_climate_database\nimport inspect\nprint(inspect.getsource(query_climate_database))\n\nquery_climate_database(db_file = \"weather.db\",\n                       country = \"India\", \n                       year_begin = 1980, \n                       year_end = 2020,\n                       month = 1)\n\ndef query_climate_database(db_file, country, year_begin, year_end, month):\n    conn = sqlite3.connect(db_file)\n    query = f'''\n    SELECT S.NAME, S.LATITUDE, S.LONGITUDE, C.NAME, T.YEAR, T.MONTH, T.Temp\n    FROM stations S\n    LEFT JOIN temperatures T ON T.id = S.id\n    LEFT JOIN countries C ON SUBSTRING(T.id, 1, 2) = C.'FIPS 10-4'\n    WHERE C.NAME == \"{country}\" AND T.MONTH == {month} AND YEAR BETWEEN {year_begin} AND {year_end}\n    '''\n\n    df = pd.read_sql_query(query, conn)\n\n    conn.close()\n\n    return df\n\n\n\n\n\n\n\n\n\n\nNAME\nLATITUDE\nLONGITUDE\nName\nYear\nMonth\nTemp\n\n\n\n\n0\nPBO_ANANTAPUR\n14.583\n77.633\nIndia\n1980\n1\n23.48\n\n\n1\nPBO_ANANTAPUR\n14.583\n77.633\nIndia\n1981\n1\n24.57\n\n\n2\nPBO_ANANTAPUR\n14.583\n77.633\nIndia\n1982\n1\n24.19\n\n\n3\nPBO_ANANTAPUR\n14.583\n77.633\nIndia\n1983\n1\n23.51\n\n\n4\nPBO_ANANTAPUR\n14.583\n77.633\nIndia\n1984\n1\n24.81\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n3147\nDARJEELING\n27.050\n88.270\nIndia\n1983\n1\n5.10\n\n\n3148\nDARJEELING\n27.050\n88.270\nIndia\n1986\n1\n6.90\n\n\n3149\nDARJEELING\n27.050\n88.270\nIndia\n1994\n1\n8.10\n\n\n3150\nDARJEELING\n27.050\n88.270\nIndia\n1995\n1\n5.60\n\n\n3151\nDARJEELING\n27.050\n88.270\nIndia\n1997\n1\n5.70\n\n\n\n\n3152 rows × 7 columns"
  },
  {
    "objectID": "posts/HW1/hw1.html#create-visualization",
    "href": "posts/HW1/hw1.html#create-visualization",
    "title": "HW1",
    "section": "Create Visualization",
    "text": "Create Visualization\nIn this part, we will write a function to create visualizations that address the following question:\nHow does the average yearly change in temperature vary within a given country?\n\n# we first create a function to pull up relevant information in a datafram\nfrom plotly import express as px\nfrom sklearn.linear_model import LinearRegression\ndef temperature_coefficient(db_file, country, year_begin, year_end, month, min_obs):\n    from climate_database import query_climate_database\n    df = query_climate_database(db_file,\n                                country, \n                               year_begin, \n                               year_end,\n                               month)\n\n    value_counts = (df[\"NAME\"].value_counts() &gt;= min_obs) \n    new_value_counts = value_counts[value_counts==True]\n    new_df = df[df['NAME'].isin(new_value_counts.index)].copy()\n    new_df[\"change\"] = new_df[\"NAME\"]\n    \n    for i in new_df['NAME'].unique():\n        df2 =  new_df[new_df[\"NAME\"]==i].copy()\n        X = df2[[\"Year\"]].copy()\n        y = df2['Temp'].copy()\n        model = LinearRegression()\n        model.fit(X, y)\n\n        # Get the first coefficient\n        first_coefficient = model.coef_[0]\n        \n        new_df.loc[new_df[\"NAME\"]==i, \"change\"] = first_coefficient\n        \n    return new_df\n\n# plot the scatter_mapbox\ndef temperature_coefficient_plot(db_file, country, year_begin, year_end, month, min_obs, **kwargs):\n    df = temperature_coefficient(db_file, country, year_begin, year_end, month, min_obs)\n    \n    df[\"Estimated Yearly Increase\"] = pd.to_numeric(df[\"change\"]).round(4)\n    fig = px.scatter_mapbox(df, \n                            lat = \"LATITUDE\",\n                            lon = \"LONGITUDE\", \n                            hover_name = \"NAME\", \n                            color = \"Estimated Yearly Increase\",\n                            color_continuous_midpoint = 0,\n                            title=f\"Estimate of Yearly Change in Temperature of Stations in {country} in month {month} from {year_begin} to {year_end}\",\n                            **kwargs)\n                            \n    return fig\n\nWe can test this function below:\n\ncolor_map = px.colors.diverging.RdGy_r # choose a colormap\nfig = temperature_coefficient_plot (\"weather.db\", \"India\", 1980, 2020, 1, \n                                   min_obs = 10,\n                                   zoom = 2,\n                                   mapbox_style=\"carto-positron\",\n                                   color_continuous_scale=color_map)\n\nfig.show()"
  },
  {
    "objectID": "posts/HW1/hw1.html#one-more-sql-query-function",
    "href": "posts/HW1/hw1.html#one-more-sql-query-function",
    "title": "HW1",
    "section": "One more SQL Query Function",
    "text": "One more SQL Query Function\nLet’s create a function to query average temperature changes over the years for a specific country. This can help us analyze long-term temperature trends.\nQuestion: How has the average temperature changed yearly in a specific country over a certain period?\n\ndef plot_temperature_trend(db_file, country, year_begin, year_end):\n    from climate_database import query_average_tempchange\n    df = query_average_tempchange(db_file, country, year_begin, year_end)\n    fig = px.line(df, x='Year', y='AverageTemp', title=f'Average Yearly Temperature Trend in {country} ({year_begin}-{year_end})')\n    fig.update_layout(xaxis_title='Year', yaxis_title='Average Temperature')\n    return fig\n\nLet’s test the function:\n\nimport importlib\nimport climate_database\nimportlib.reload(climate_database)\n\n&lt;module 'climate_database' from '/Users/ada/Desktop/PIC 16B/PIC16B/posts/HW1/climate_database.py'&gt;\n\n\n\nfig1 = plot_temperature_trend('weather.db','India', 1980, 2020)\nfig1.show()\n\n                                                \n\n\nIn the box plot below, we will answer the question: when compare the highest temperatures between 2 countries, which country has the higher temperature?\n\ndef temperature_coefficient_plot(country1, country2, n = 100, **kwargs):\n    conn = sqlite3.connect('weather.db')\n    query = \\\n            f\"\"\"\n            SELECT SUBSTRING(id,1,2) AS country, temp\n            FROM temperatures\n            WHERE country = \"{country1}\"\n            ORDER BY temp DESC LIMIT {n}\n            \"\"\"\n\n    df = pd.read_sql_query(query, conn)\n    query = \\\n    f\"\"\"\n    SELECT SUBSTRING(id,1,2) AS country, temp\n    FROM temperatures\n    WHERE country = \"{country2}\"\n    ORDER BY temp DESC LIMIT {n}\n    \"\"\"\n\n    df1 = pd.read_sql_query(query, conn)\n    df = pd.concat([df,df1])\n    fig = px.box(df, \n             \"Temp\",\n             color = \"country\",\n             width = 600,\n             height = 300,\n             title = f\"Comparing highest {n} temperatures of {country1} versus {country2}\")\n    \n    return fig\n\nconn.close()\ntemperature_coefficient_plot(\"US\",\"CA\")"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "PIC16B",
    "section": "",
    "text": "HW1\n\n\n\n\n\n\npython\n\n\n\n\n\n\n\n\n\nJan 28, 2024\n\n\nShuyan Gao\n\n\n\n\n\n\n\n\n\n\n\n\nHW0\n\n\n\n\n\n\npython\n\n\ndata visualization\n\n\n\n\n\n\n\n\n\nJan 22, 2024\n\n\nShuyan Gao\n\n\n\n\n\n\n\n\n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\nJan 16, 2024\n\n\nShuyan Gao\n\n\n\n\n\n\nNo matching items"
  }
]